# ‚úÖ C√°ch hi·ªán t·∫°i: AgentWorkflow
# G·ªìm agent linearly: Filter ‚Üí Score ‚Üí RAG ‚Üí Summarizer.

# ƒê∆°n gi·∫£n, d·ªÖ hi·ªÉu, d√πng can_handoff_to ƒë·ªÉ ƒë·ªãnh lu·ªìng.

# Limit: thi·∫øu kh·∫£ nƒÉng loop, parallelism, ho·∫∑c branching conditional ph·ª©c t·∫°p.


# pip install llama-index llama-index-utils-workflow openai python-dotenv
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, Settings, Document

from llama_index.llms.openai import OpenAI
from llama_index.core.agent.workflow import AgentWorkflow, FunctionAgent
from llama_index.core.tools import FunctionTool, QueryEngineTool
from llama_index.core.workflow import Workflow, step, StartEvent, StopEvent

import os
import asyncio
from dotenv import load_dotenv
load_dotenv()
Settings.llm = OpenAI(model="gpt-4")

UNIVERSITIES_DB = {
    "bach_khoa_hn": {
        "name": "ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi",
        "cutoff_gpa": 8.5,
        "tuition_per_month": 2000000,
        "location": "H√† N·ªôi",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 8.7, "career": "L·∫≠p tr√¨nh vi√™n, Data Scientist"},
            "C∆° kh√≠": {"cutoff": 8.3, "career": "K·ªπ s∆∞ c∆° kh√≠, Thi·∫øt k·∫ø s·∫£n ph·∫©m"},
            "ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng": {"cutoff": 8.5, "career": "K·ªπ s∆∞ ƒëi·ªán t·ª≠, IoT Developer"}
        },
        "facilities": "Lab hi·ªán ƒë·∫°i, th∆∞ vi·ªán l·ªõn",
        "ranking": "Top 1 k·ªπ thu·∫≠t Vi·ªát Nam"
    },
    "kinh_te_qd": {
        "name": "ƒê·∫°i h·ªçc Kinh t·∫ø Qu·ªëc d√¢n", 
        "cutoff_gpa": 7.8,
        "tuition_per_month": 1500000,
        "location": "H√† N·ªôi",
        "programs": {
            "Kinh t·∫ø": {"cutoff": 8.0, "career": "Nh√† kinh t·∫ø, Ph√¢n t√≠ch ch√≠nh s√°ch"},
            "T√†i ch√≠nh Ng√¢n h√†ng": {"cutoff": 8.2, "career": "Banker, Financial Analyst"},
            "Marketing": {"cutoff": 7.5, "career": "Marketing Manager, Digital Marketer"}
        },
        "facilities": "M√¥ ph·ªèng giao d·ªãch ch·ª©ng kho√°n",
        "ranking": "Top 1 kinh t·∫ø Vi·ªát Nam"
    },
    "fpt": {
        "name": "ƒê·∫°i h·ªçc FPT",
        "cutoff_gpa": 6.5,
        "tuition_per_month": 3000000,
        "location": "TP.HCM, H√† N·ªôi, ƒê√† N·∫µng",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 6.8, "career": "Software Engineer, DevOps"},
            "Kinh doanh Qu·ªëc t·∫ø": {"cutoff": 6.3, "career": "Business Analyst, Project Manager"},
            "Thi·∫øt k·∫ø ƒê·ªì h·ªça": {"cutoff": 6.0, "career": "UI/UX Designer, Graphic Designer"}
        },
        "facilities": "Campus hi·ªán ƒë·∫°i, lab Apple, th·ª±c t·∫≠p t·∫°i FPT",
        "ranking": "Top CNTT t∆∞ th·ª•c"
    },
    "rmit": {
        "name": "RMIT Vi·ªát Nam",
        "cutoff_gpa": 7.0,
        "tuition_per_month": 8000000,
        "location": "TP.HCM",
        "programs": {
            "Computer Science": {"cutoff": 7.2, "career": "Tech Lead, Research Scientist"},
            "Business Administration": {"cutoff": 6.8, "career": "CEO, Consultant"},
            "Media & Communication": {"cutoff": 6.5, "career": "Content Creator, PR Manager"}
        },
        "facilities": "Chu·∫©n qu·ªëc t·∫ø, b·∫±ng c·∫•p Australia",
        "ranking": "Top 250 th·∫ø gi·ªõi"
    }
}

# T·∫°o documents chi ti·∫øt cho RAG
docs = []
for uni_id, uni_data in UNIVERSITIES_DB.items():
    # Document t·ªïng quan
    overview = f"""
    {uni_data['name']}:
    - ƒêi·ªÉm chu·∫©n chung: {uni_data['cutoff_gpa']}/10
    - H·ªçc ph√≠: {uni_data['tuition_per_month']:,} VNƒê/th√°ng
    - ƒê·ªãa ƒëi·ªÉm: {uni_data['location']}
    - C∆° s·ªü v·∫≠t ch·∫•t: {uni_data['facilities']}
    - X·∫øp h·∫°ng: {uni_data['ranking']}
    """
    
    # Document chi ti·∫øt t·ª´ng ng√†nh
    for program, details in uni_data['programs'].items():
        program_info = f"""
        {uni_data['name']} - Ng√†nh {program}:
        - ƒêi·ªÉm chu·∫©n: {details['cutoff']}/10
        - C∆° h·ªôi ngh·ªÅ nghi·ªáp: {details['career']}
        - Tr∆∞·ªùng: {uni_data['name']}
        - H·ªçc ph√≠: {uni_data['tuition_per_month']:,} VNƒê/th√°ng
        - ƒê·ªãa ƒëi·ªÉm: {uni_data['location']}
        """
        docs.append(Document(text=program_info))
    
    docs.append(Document(text=overview))

# T·∫°o Vector Index
# 1. Load documents (university data)
index = VectorStoreIndex.from_documents(docs)
query_engine = index.as_query_engine(similarity_top_k=5)


# 2. Tool: retrieval
rag_tool = QueryEngineTool.from_defaults(
    query_engine,
    name="university_rag",
    description="Retrieve info about university programs and admission requirements"
)

# 2. FilterAgent
def filter_unis(gpa: float, budget: float, location: str):
    results = []
    for uni in UNIVERSITIES_DB.values():
        for prog, d in uni["programs"].items():
            if d["cutoff"] <= gpa and uni["tuition_per_month"]/1e6 <= budget and location in uni["location"]:
                results.append({"uni": uni["name"], "program": prog, "cutoff": d["cutoff"]})
    return results

filter_tool = FunctionTool.from_defaults(fn=filter_unis)
filter_agent = FunctionAgent(
    name="FilterAgent",
    description="Filter programs by GPA, budget, location",
    tools=[filter_tool],
    system_prompt="Filter university programs based on structured user input.",
    can_handoff_to=["ScoreAgent"]
)

# 3. ScoreAgent
def score_programs(filtered: list):
    for x in filtered:
        # simple score: lower cutoff = ∆∞u ti√™n
        x["score"] = round((10 - x["cutoff"])*10 + 0.1, 1)
    sorted_list = sorted(filtered, key=lambda x: -x["score"])
    return sorted_list

score_tool = FunctionTool.from_defaults(fn=score_programs)
score_agent = FunctionAgent(
    name="ScoreAgent",
    description="Score and rank filtered programs",
    
    tools=[score_tool],
    system_prompt="Score and sort the programs by fit for user.",
    can_handoff_to=["RAGAgent"]
)

# 4. RAGAgent ‚Äì l·∫•y chi ti·∫øt
rag_agent = FunctionAgent(
    name="RAGAgent",
    description="Retrieve detailed info for top programs",
    
    tools=[rag_tool],
    system_prompt="Retrieve info about university/program for top choices.",
    can_handoff_to=["SummarizerAgent"]
)

# 5. SummarizerAgent
def summarize_details(details: list):
    summary = ""
    for d in details:
        summary += f"üè´ {d['uni']} - {d['program']}\n"
        summary += f"{d.get('rag_text','')}\n---\n"
    return summary

summ_tool = FunctionTool.from_defaults(fn=summarize_details)
summ_agent = FunctionAgent(
    name="SummarizerAgent",
    description="Summarize key info for user final answer",
    
    tools=[summ_tool],
    system_prompt="Summarize career, facilities, ranking for final top program.",
    can_handoff_to=[]
)

# 6. X√¢y workflow
workflow = AgentWorkflow(
    agents=[filter_agent, score_agent, rag_agent, summ_agent],
    root_agent="FilterAgent"
)

# 7. Ch·∫°y workflow
async def main():
    resp = await workflow.run(user_msg="""
    N√™u 3 tr∆∞·ªùng ·ªü H√† N·ªôi c√≥ ng√†nh CNTT ph√π h·ª£p v·ªõi GPA 8.2 v√† ng√¢n s√°ch d∆∞·ªõi 2.5 tri·ªáu/th√°ng, sau ƒë√≥ so s√°nh h·ªçc ph√≠ v√† c∆° h·ªôi vi·ªác l√†m t·ª´ng tr∆∞·ªùng
   
    """)
    print(resp)

if __name__ == "__main__":
    asyncio.run(main())

#  GPA 8.2, th√≠ch CNTT, ng√¢n s√°ch 2.5 tri·ªáu/th√°ng, ·ªü H√† N·ªôi. H·ªèi ng√†nh ph√π h·ª£p v√† l√Ω do.