"""
Enhanced Agentic RAG v·ªõi Tools v√† Memory - University Advisor
"""

import os
import json
from typing import List, Dict, Optional
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, Settings, Document
from llama_index.core.agent import ReActAgent
from llama_index.core.tools import QueryEngineTool, ToolMetadata, FunctionTool
from llama_index.core.memory import ChatMemoryBuffer
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding

from dotenv import load_dotenv

# Load env
load_dotenv()
# Setup LLM v√† Embeddings
Settings.llm = OpenAI(api_key=os.getenv("OPENAI_API_KEY"), model="gpt-4")
Settings.embed_model = OpenAIEmbedding(api_key=os.getenv("OPENAI_API_KEY"))

# Database c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc chi ti·∫øt
UNIVERSITIES_DB = {
    "bach_khoa_hn": {
        "name": "ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi",
        "cutoff_gpa": 8.5,
        "tuition_per_month": 2000000,
        "location": "H√† N·ªôi",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 8.7, "career": "L·∫≠p tr√¨nh vi√™n, Data Scientist"},
            "C∆° kh√≠": {"cutoff": 8.3, "career": "K·ªπ s∆∞ c∆° kh√≠, Thi·∫øt k·∫ø s·∫£n ph·∫©m"},
            "ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng": {"cutoff": 8.5, "career": "K·ªπ s∆∞ ƒëi·ªán t·ª≠, IoT Developer"}
        },
        "facilities": "Lab hi·ªán ƒë·∫°i, th∆∞ vi·ªán l·ªõn",
        "ranking": "Top 1 k·ªπ thu·∫≠t Vi·ªát Nam"
    },
    "kinh_te_qd": {
        "name": "ƒê·∫°i h·ªçc Kinh t·∫ø Qu·ªëc d√¢n", 
        "cutoff_gpa": 7.8,
        "tuition_per_month": 1500000,
        "location": "H√† N·ªôi",
        "programs": {
            "Kinh t·∫ø": {"cutoff": 8.0, "career": "Nh√† kinh t·∫ø, Ph√¢n t√≠ch ch√≠nh s√°ch"},
            "T√†i ch√≠nh Ng√¢n h√†ng": {"cutoff": 8.2, "career": "Banker, Financial Analyst"},
            "Marketing": {"cutoff": 7.5, "career": "Marketing Manager, Digital Marketer"}
        },
        "facilities": "M√¥ ph·ªèng giao d·ªãch ch·ª©ng kho√°n",
        "ranking": "Top 1 kinh t·∫ø Vi·ªát Nam"
    },
    "fpt": {
        "name": "ƒê·∫°i h·ªçc FPT",
        "cutoff_gpa": 6.5,
        "tuition_per_month": 3000000,
        "location": "TP.HCM, H√† N·ªôi, ƒê√† N·∫µng",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 6.8, "career": "Software Engineer, DevOps"},
            "Kinh doanh Qu·ªëc t·∫ø": {"cutoff": 6.3, "career": "Business Analyst, Project Manager"},
            "Thi·∫øt k·∫ø ƒê·ªì h·ªça": {"cutoff": 6.0, "career": "UI/UX Designer, Graphic Designer"}
        },
        "facilities": "Campus hi·ªán ƒë·∫°i, lab Apple, th·ª±c t·∫≠p t·∫°i FPT",
        "ranking": "Top CNTT t∆∞ th·ª•c"
    },
    "rmit": {
        "name": "RMIT Vi·ªát Nam",
        "cutoff_gpa": 7.0,
        "tuition_per_month": 8000000,
        "location": "TP.HCM",
        "programs": {
            "Computer Science": {"cutoff": 7.2, "career": "Tech Lead, Research Scientist"},
            "Business Administration": {"cutoff": 6.8, "career": "CEO, Consultant"},
            "Media & Communication": {"cutoff": 6.5, "career": "Content Creator, PR Manager"}
        },
        "facilities": "Chu·∫©n qu·ªëc t·∫ø, b·∫±ng c·∫•p Australia",
        "ranking": "Top 250 th·∫ø gi·ªõi"
    }
}

# T·∫°o documents chi ti·∫øt cho RAG
docs = []
for uni_id, uni_data in UNIVERSITIES_DB.items():
    # Document t·ªïng quan
    overview = f"""
    {uni_data['name']}:
    - ƒêi·ªÉm chu·∫©n chung: {uni_data['cutoff_gpa']}/10
    - H·ªçc ph√≠: {uni_data['tuition_per_month']:,} VNƒê/th√°ng
    - ƒê·ªãa ƒëi·ªÉm: {uni_data['location']}
    - C∆° s·ªü v·∫≠t ch·∫•t: {uni_data['facilities']}
    - X·∫øp h·∫°ng: {uni_data['ranking']}
    """
    
    # Document chi ti·∫øt t·ª´ng ng√†nh
    for program, details in uni_data['programs'].items():
        program_info = f"""
        {uni_data['name']} - Ng√†nh {program}:
        - ƒêi·ªÉm chu·∫©n: {details['cutoff']}/10
        - C∆° h·ªôi ngh·ªÅ nghi·ªáp: {details['career']}
        - Tr∆∞·ªùng: {uni_data['name']}
        - H·ªçc ph√≠: {uni_data['tuition_per_month']:,} VNƒê/th√°ng
        - ƒê·ªãa ƒëi·ªÉm: {uni_data['location']}
        """
        docs.append(Document(text=program_info))
    
    docs.append(Document(text=overview))

# T·∫°o Vector Index
index = VectorStoreIndex.from_documents(docs)
query_engine = index.as_query_engine(similarity_top_k=5)

# Tool 1: T√¨m ki·∫øm tr∆∞·ªùng ph√π h·ª£p
def search_universities(
    desired_program: Optional[str] = None,
    max_tuition: Optional[float] = None,
    location: Optional[str] = None,
    min_gpa: Optional[float] = None
) -> str:
    """T√¨m ki·∫øm c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p v·ªõi ti√™u ch√≠"""
    
    results = []
    
    for uni_id, uni_data in UNIVERSITIES_DB.items():
        matches = []
        
        # Check location
        if location and location.lower() in uni_data['location'].lower():
            matches.append(f"‚úÖ C√≥ c∆° s·ªü t·∫°i {location}")
        
        # Check budget
        if max_tuition and uni_data['tuition_per_month'] <= max_tuition * 1000000:
            matches.append(f"‚úÖ Trong ng√¢n s√°ch ({uni_data['tuition_per_month']:,} VNƒê/th√°ng)")
        
        # Check programs
        if desired_program:
            for prog, details in uni_data['programs'].items():
                if desired_program.lower() in prog.lower():
                    gpa_status = ""
                    if min_gpa:
                        if min_gpa >= details['cutoff']:
                            gpa_status = f" ‚úÖ GPA ƒë·ªß ƒëi·ªÅu ki·ªán"
                        else:
                            gpa_status = f" ‚ö†Ô∏è C·∫ßn GPA {details['cutoff']} (b·∫°n c√≥ {min_gpa})"
                    
                    matches.append(f"‚úÖ C√≥ ng√†nh {prog} - ƒêi·ªÉm chu·∫©n: {details['cutoff']}{gpa_status}")
                    matches.append(f"   üíº C∆° h·ªôi vi·ªác l√†m: {details['career']}")
        
        if matches:
            result = f"\nüè´ **{uni_data['name']}**\n"
            result += f"üìç {uni_data['location']} | üí∞ {uni_data['tuition_per_month']:,} VNƒê/th√°ng\n"
            result += f"üèÜ {uni_data['ranking']}\n"
            for match in matches:
                result += f"{match}\n"
            results.append(result)
    
    if not results:
        return "Kh√¥ng t√¨m th·∫•y tr∆∞·ªùng n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠. H√£y th·ª≠ m·ªü r·ªông ƒëi·ªÅu ki·ªán t√¨m ki·∫øm."
    
    return "\n".join(results)

# Tool 2: Ch·∫•m ƒëi·ªÉm chi ti·∫øt
def score_program(
    user_gpa: Optional[float] = None, 
    desired_program: Optional[str] = None, 
    budget: Optional[float] = None, 
    location_pref: Optional[str] = None, 
    university_name: str = ""
) -> str:
    """Ch·∫•m ƒëi·ªÉm chi ti·∫øt m·ªôt tr∆∞·ªùng ƒë·∫°i h·ªçc c·ª• th·ªÉ"""
    
    # T√¨m tr∆∞·ªùng trong database
    target_uni = None
    for uni_id, uni_data in UNIVERSITIES_DB.items():
        if university_name.lower() in uni_data['name'].lower():
            target_uni = uni_data
            break
    
    if not target_uni:
        return f"Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ {university_name}"
    
    score = 0
    max_score = 0
    details = []
    
    # Ch·∫•m ƒëi·ªÉm GPA
    if user_gpa is not None:
        max_score += 5
        if user_gpa >= target_uni['cutoff_gpa']:
            score += 5
            details.append(f"‚úÖ GPA ph√π h·ª£p ({user_gpa} >= {target_uni['cutoff_gpa']})")
        else:
            gap = target_uni['cutoff_gpa'] - user_gpa
            details.append(f"‚ö†Ô∏è GPA ch∆∞a ƒë·ªß (thi·∫øu {gap:.1f} ƒëi·ªÉm)")
    
    # Ch·∫•m ƒëi·ªÉm ng√¢n s√°ch
    if budget is not None:
        max_score += 3
        monthly_cost = target_uni['tuition_per_month'] / 1000000
        if monthly_cost <= budget:
            score += 3
            details.append(f"‚úÖ Trong ng√¢n s√°ch ({monthly_cost:.1f}M <= {budget}M)")
        else:
            over_budget = monthly_cost - budget
            details.append(f"‚ö†Ô∏è V∆∞·ª£t ng√¢n s√°ch {over_budget:.1f}M VNƒê/th√°ng")
    
    # Ch·∫•m ƒëi·ªÉm ƒë·ªãa ƒëi·ªÉm
    if location_pref:
        max_score += 2
        if location_pref.lower() in target_uni['location'].lower():
            score += 2
            details.append(f"‚úÖ C√≥ c∆° s·ªü t·∫°i {location_pref}")
        else:
            details.append(f"‚ö†Ô∏è Kh√¥ng c√≥ c∆° s·ªü t·∫°i {location_pref}")
    
    # Ch·∫•m ƒëi·ªÉm ng√†nh h·ªçc
    if desired_program:
        max_score += 4
        program_found = False
        for prog, prog_details in target_uni['programs'].items():
            if desired_program.lower() in prog.lower():
                program_found = True
                score += 4
                details.append(f"‚úÖ C√≥ ng√†nh {prog}")
                details.append(f"   üìã ƒêi·ªÉm chu·∫©n ng√†nh: {prog_details['cutoff']}")
                details.append(f"   üíº C∆° h·ªôi vi·ªác l√†m: {prog_details['career']}")
                break
        
        if not program_found:
            details.append(f"‚ö†Ô∏è Kh√¥ng c√≥ ng√†nh {desired_program}")
    
    # Th√¥ng tin b·ªï sung
    details.extend([
        f"üèóÔ∏è C∆° s·ªü v·∫≠t ch·∫•t: {target_uni['facilities']}",
        f"üèÜ X·∫øp h·∫°ng: {target_uni['ranking']}"
    ])
    
    result = f"\nüìä **ƒê√°nh gi√° {target_uni['name']}**\n"
    if max_score > 0:
        percentage = (score / max_score) * 100
        result += f"üéØ ƒêi·ªÉm ph√π h·ª£p: {score}/{max_score} ({percentage:.0f}%)\n\n"
    
    result += "\n".join(details)
    
    return result

# Tool 3: G·ª£i √Ω d·ª±a tr√™n profile
def suggest_programs(
    user_gpa: Optional[float] = None,
    interests: Optional[str] = None,
    budget: Optional[float] = None
) -> str:
    """G·ª£i √Ω c√°c ng√†nh h·ªçc v√† tr∆∞·ªùng ph√π h·ª£p v·ªõi profile"""
    
    suggestions = []
    
    for uni_id, uni_data in UNIVERSITIES_DB.items():
        for program, details in uni_data['programs'].items():
            suitable = True
            reasons = []
            
            # Check GPA
            if user_gpa is not None:
                if user_gpa >= details['cutoff']:
                    reasons.append(f"‚úÖ GPA ƒë·ªß ƒëi·ªÅu ki·ªán ({user_gpa} >= {details['cutoff']})")
                else:
                    suitable = False
                    continue
            
            # Check budget
            if budget is not None:
                monthly_cost = uni_data['tuition_per_month'] / 1000000
                if monthly_cost <= budget:
                    reasons.append(f"‚úÖ Trong ng√¢n s√°ch ({monthly_cost:.1f}M/th√°ng)")
                else:
                    suitable = False
                    continue
            
            # Check interests
            if interests:
                interest_keywords = interests.lower().split()
                program_text = f"{program} {details['career']}".lower()
                
                if any(keyword in program_text for keyword in interest_keywords):
                    reasons.append(f"‚úÖ Ph√π h·ª£p v·ªõi s·ªü th√≠ch ({interests})")
            
            if suitable and reasons:
                suggestion = f"\nüéì **{program}** - {uni_data['name']}\n"
                suggestion += f"üìç {uni_data['location']} | üí∞ {uni_data['tuition_per_month']:,} VNƒê/th√°ng\n"
                suggestion += f"üìä ƒêi·ªÉm chu·∫©n: {details['cutoff']}/10\n"
                suggestion += f"üíº C∆° h·ªôi vi·ªác l√†m: {details['career']}\n"
                suggestion += "\n".join(reasons)
                
                suggestions.append((details['cutoff'], suggestion))
    
    if not suggestions:
        return "Kh√¥ng t√¨m th·∫•y g·ª£i √Ω ph√π h·ª£p. H√£y cung c·∫•p th√™m th√¥ng tin ho·∫∑c m·ªü r·ªông ti√™u ch√≠."
    
    # S·∫Øp x·∫øp theo ƒëi·ªÉm chu·∫©n (th·∫•p ƒë·∫øn cao ƒë·ªÉ d·ªÖ ƒë·ªó h∆°n)
    suggestions.sort(key=lambda x: x[0])
    
    result = "üîç **G·ª£i √Ω c√°c ng√†nh h·ªçc ph√π h·ª£p:**\n"
    result += "\n".join([s[1] for s in suggestions[:5]])  # Top 5 suggestions
    
    return result

# Setup Tools
rag_tool = QueryEngineTool(
    query_engine=query_engine,
    metadata=ToolMetadata(
        name="knowledge_search",
        description="T√¨m ki·∫øm th√¥ng tin chi ti·∫øt v·ªÅ tr∆∞·ªùng ƒë·∫°i h·ªçc, ng√†nh h·ªçc t·ª´ knowledge base"
    )
)

search_tool = FunctionTool.from_defaults(
    fn=search_universities,
    name="search_universities",
    description="T√¨m ki·∫øm tr∆∞·ªùng ƒë·∫°i h·ªçc theo ti√™u ch√≠: ng√†nh h·ªçc, h·ªçc ph√≠, ƒë·ªãa ƒëi·ªÉm, GPA"
)

score_tool = FunctionTool.from_defaults(
    fn=score_program,
    name="score_program", 
    description="Ch·∫•m ƒëi·ªÉm chi ti·∫øt m·ªôt tr∆∞·ªùng ƒë·∫°i h·ªçc c·ª• th·ªÉ d·ª±a tr√™n GPA, ng√†nh, ng√¢n s√°ch, ƒë·ªãa ƒëi·ªÉm"
)

suggest_tool = FunctionTool.from_defaults(
    fn=suggest_programs,
    name="suggest_programs",
    description="G·ª£i √Ω c√°c ng√†nh h·ªçc v√† tr∆∞·ªùng ph√π h·ª£p d·ª±a tr√™n GPA, s·ªü th√≠ch, ng√¢n s√°ch"
)

tools = [rag_tool, search_tool, score_tool, suggest_tool]

# Setup Memory
memory = ChatMemoryBuffer.from_defaults(token_limit=3000)

# T·∫°o Agent v·ªõi system prompt chi ti·∫øt
agent = ReActAgent.from_tools(
    tools=tools,
    memory=memory,
    verbose=True,
    system_prompt="""
B·∫°n l√† tr·ª£ l√Ω t∆∞ v·∫•n tuy·ªÉn sinh ƒë·∫°i h·ªçc th√¥ng minh v√† chu ƒë√°o.

NHI·ªÜM V·ª§:
1. Thu th·∫≠p th√¥ng tin t·ª´ h·ªçc sinh: GPA, ng√†nh quan t√¢m, ng√¢n s√°ch, ƒë·ªãa ƒëi·ªÉm
2. S·ª≠ d·ª•ng tools ƒë·ªÉ t√¨m ki·∫øm, ch·∫•m ƒëi·ªÉm, g·ª£i √Ω
3. ƒê∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ v√† th·ª±c t·∫ø

C√ÅCH X·ª¨ L√ù KHI THI·∫æU TH√îNG TIN:
- N·∫øu thi·∫øu GPA: H·ªèi l·ªãch s·ª± v√† gi·∫£i th√≠ch t·∫ßm quan tr·ªçng
- N·∫øu thi·∫øu ng√†nh: G·ª£i √Ω d·ª±a tr√™n s·ªü th√≠ch, kh·∫£ nƒÉng
- N·∫øu thi·∫øu ng√¢n s√°ch: ƒê∆∞a ra c√°c m·ª©c tham kh·∫£o
- N·∫øu thi·∫øu ƒë·ªãa ƒëi·ªÉm: H·ªèi v·ªÅ s·ªü th√≠ch v√† gia ƒë√¨nh

TOOLS USAGE:
- knowledge_search: T√¨m th√¥ng tin chi ti·∫øt c·ª• th·ªÉ
- search_universities: L·ªçc tr∆∞·ªùng theo nhi·ªÅu ti√™u ch√≠
- score_program: ƒê√°nh gi√° chi ti·∫øt m·ªôt tr∆∞·ªùng c·ª• th·ªÉ  
- suggest_programs: G·ª£i √Ω d·ª±a tr√™n profile t·ªïng th·ªÉ

PHONG C√ÅCH:
- Th√¢n thi·ªán, chuy√™n nghi·ªáp
- ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø
- Gi·∫£i th√≠ch r√µ r√†ng c√°c ti√™u ch√≠
- Khuy·∫øn kh√≠ch h·ªçc sinh cung c·∫•p th√™m th√¥ng tin
""".strip()
)

# Chat function v·ªõi h∆∞·ªõng d·∫´n
def chat():
    print("üéì Tr·ª£ l√Ω t∆∞ v·∫•n tuy·ªÉn sinh ƒë·∫°i h·ªçc")
    print("üí° H√£y chia s·∫ª: GPA, ng√†nh quan t√¢m, ng√¢n s√°ch, n∆°i ·ªü ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n t·ªët nh·∫•t!")
    print("‚ùì V√≠ d·ª•: 'Em c√≥ GPA 8.2, th√≠ch CNTT, ng√¢n s√°ch 2.5 tri·ªáu/th√°ng, ·ªü H√† N·ªôi'")
    print("üìù G√µ 'quit' ƒë·ªÉ tho√°t\n")
    
    while True:
        user_input = input("\nüë§ B·∫°n: ")
        if user_input.lower() == 'quit':
            break
        
        response = agent.chat(user_input)
        print(f"\nü§ñ Tr·ª£ l√Ω: {response}")

# Run chat
if __name__ == "__main__":
    chat()