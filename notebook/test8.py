import os
import asyncio
from typing import List, Dict, Optional
from llama_index.core.agent.workflow import FunctionAgent, AgentWorkflow
from llama_index.indices.managed.llama_cloud import LlamaCloudIndex
from llama_index.llms.google_genai import GoogleGenAI
from llama_index.core.tools import FunctionTool, QueryEngineTool
import logging

from dotenv import load_dotenv

load_dotenv()

# Kh·ªüi t·∫°o RAG index
def create_rag_index():
    """T·∫°o LlamaCloudIndex"""
    index = LlamaCloudIndex(
        name="dsdaihoc",
        project_name="Default", 
        organization_id="1bcf5fb2-bd7d-4c76-b6d5-bb793486e1b3",
        api_key=os.getenv("LLAMA_CLOUD_API_KEY")
    )
    return index

# Structured data cho tooling
UNIVERSITIES_DB = {
    "bach_khoa_hn": {
        "name": "ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi",
        "cutoff_gpa": 8.5,
        "tuition_per_month": 2000000,
        "location": "H√† N·ªôi",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 8.7, "career": "L·∫≠p tr√¨nh vi√™n, Data Scientist"},
            "C∆° kh√≠": {"cutoff": 8.3, "career": "K·ªπ s∆∞ c∆° kh√≠, Thi·∫øt k·∫ø s·∫£n ph·∫©m"},
            "ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng": {"cutoff": 8.5, "career": "K·ªπ s∆∞ ƒëi·ªán t·ª≠, IoT Developer"}
        },
        "facilities": "Lab hi·ªán ƒë·∫°i, th∆∞ vi·ªán l·ªõn",
        "ranking": "Top 1 k·ªπ thu·∫≠t Vi·ªát Nam"
    },
    "kinh_te_qd": {
        "name": "ƒê·∫°i h·ªçc Kinh t·∫ø Qu·ªëc d√¢n",
        "cutoff_gpa": 7.8,
        "tuition_per_month": 1500000,
        "location": "H√† N·ªôi",
        "programs": {
            "Kinh t·∫ø": {"cutoff": 8.0, "career": "Nh√† kinh t·∫ø, Ph√¢n t√≠ch ch√≠nh s√°ch"},
            "T√†i ch√≠nh Ng√¢n h√†ng": {"cutoff": 8.2, "career": "Banker, Financial Analyst"},
            "Marketing": {"cutoff": 7.5, "career": "Marketing Manager, Digital Marketer"}
        },
        "facilities": "M√¥ ph·ªèng giao d·ªãch ch·ª©ng kho√°n",
        "ranking": "Top 1 kinh t·∫ø Vi·ªát Nam"
    },
    "thuong_mai": {
        "name": "ƒê·∫°i h·ªçc Th∆∞∆°ng m·∫°i",
        "cutoff_gpa": 7.5,
        "tuition_per_month": 1200000,
        "location": "H√† N·ªôi",
        "programs": {
            "Kinh t·∫ø": {"cutoff": 7.8, "career": "Chuy√™n vi√™n kinh t·∫ø, T∆∞ v·∫•n"},
            "Qu·∫£n tr·ªã kinh doanh": {"cutoff": 7.6, "career": "Manager, Business Analyst"},
            "Logistics": {"cutoff": 7.2, "career": "Supply Chain Manager"}
        },
        "facilities": "Trung t√¢m th·ª±c h√†nh kinh doanh",
        "ranking": "Top 3 kinh t·∫ø Vi·ªát Nam"
    }
}

CAREER_INFO = {
    "kinh t·∫ø": {
        "prospects": "Ng√†nh Kinh t·∫ø c√≥ tri·ªÉn v·ªçng t·ªët v·ªõi m·ª©c l∆∞∆°ng kh·ªüi ƒëi·ªÉm 8-12 tri·ªáu/th√°ng. C∆° h·ªôi vi·ªác l√†m ·ªü ng√¢n h√†ng, t·∫≠p ƒëo√†n, t∆∞ v·∫•n t√†i ch√≠nh.",
        "skills": "Ph√¢n t√≠ch d·ªØ li·ªáu, Excel n√¢ng cao, t∆∞ duy logic, ti·∫øng Anh"
    },
    "c√¥ng ngh·ªá th√¥ng tin": {
        "prospects": "IT c√≥ nhu c·∫ßu cao v·ªõi l∆∞∆°ng 12-20 tri·ªáu/th√°ng. Nhi·ªÅu c∆° h·ªôi remote work v√† ph√°t tri·ªÉn s·ª± nghi·ªáp.",
        "skills": "L·∫≠p tr√¨nh, t∆∞ duy thu·∫≠t to√°n, h·ªçc h·ªèi li√™n t·ª•c"
    }
}

# H√†m t√¨m tr∆∞·ªùng ƒë·∫°i h·ªçc v·ªõi RAG
async def find_universities(area: str, major: str, max_fee: float = 2.0) -> str:
    """T√¨m tr∆∞·ªùng theo khu v·ª±c v√† h·ªçc ph√≠ s·ª≠ d·ª•ng RAG"""
    print(f"üîç ƒêang t√¨m tr∆∞·ªùng ng√†nh {major} ·ªü {area} v·ªõi h·ªçc ph√≠ d∆∞·ªõi {max_fee} tri·ªáu...")
    
    index = create_rag_index()
    query_engine = index.as_query_engine(similarity_top_k=3)
    query = f"T√¨m tr∆∞·ªùng ƒë·∫°i h·ªçc ng√†nh {major} ·ªü {area} v·ªõi h·ªçc ph√≠ d∆∞·ªõi {max_fee} tri·ªáu/th√°ng"
    response = await query_engine.aquery(query)
    return str(response)

# H√†m t∆∞ v·∫•n ngh·ªÅ nghi·ªáp v·ªõi RAG
async def career_advice(major: str) -> str:
    """T∆∞ v·∫•n tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp s·ª≠ d·ª•ng RAG"""
    print(f"üíº ƒêang ph√¢n t√≠ch tri·ªÉn v·ªçng ng√†nh {major}...")
    
    index = create_rag_index()
    query_engine = index.as_query_engine(similarity_top_k=3)
    query = f"Tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp ng√†nh {major}, c∆° h·ªôi vi·ªác l√†m v√† m·ª©c l∆∞∆°ng"
    response = await query_engine.aquery(query)
    return str(response)

# H√†m t√¨m h·ªçc ph√≠ ng√†nh kinh t·∫ø r·∫ª nh·∫•t
def find_cheapest_economics_program() -> str:
    """T√¨m h·ªçc ph√≠ ng√†nh kinh t·∫ø r·∫ª nh·∫•t t·ª´ structured data"""
    economics_programs = []
    
    for uni_id, uni_data in UNIVERSITIES_DB.items():
        for program_name, program_info in uni_data["programs"].items():
            if "kinh t·∫ø" in program_name.lower():
                economics_programs.append({
                    "university": uni_data["name"],
                    "program": program_name,
                    "tuition": uni_data["tuition_per_month"],
                    "cutoff": program_info["cutoff"],
                    "career": program_info["career"]
                })
    
    # S·∫Øp x·∫øp theo h·ªçc ph√≠
    economics_programs.sort(key=lambda x: x["tuition"])
    
    if economics_programs:
        cheapest = economics_programs[0]
        return f"H·ªçc ph√≠ ng√†nh kinh t·∫ø r·∫ª nh·∫•t:\n- Tr∆∞·ªùng: {cheapest['university']}\n- Ng√†nh: {cheapest['program']}\n- H·ªçc ph√≠: {cheapest['tuition']:,} VND/th√°ng\n- ƒêi·ªÉm chu·∫©n: {cheapest['cutoff']}\n- Tri·ªÉn v·ªçng: {cheapest['career']}"
    
    return "Kh√¥ng t√¨m th·∫•y ng√†nh kinh t·∫ø n√†o."

# T·∫°o tools
uni_tool = FunctionTool.from_defaults(
    fn=find_universities,
    name="find_universities",
    description="T√¨m tr∆∞·ªùng ƒë·∫°i h·ªçc theo khu v·ª±c, ng√†nh h·ªçc v√† h·ªçc ph√≠ t·ªëi ƒëa"
)

career_tool = FunctionTool.from_defaults(
    fn=career_advice, 
    name="career_advice",
    description="T∆∞ v·∫•n tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp c·ªßa m·ªôt ng√†nh h·ªçc"
)

cheapest_economics_tool = FunctionTool.from_defaults(
    fn=find_cheapest_economics_program,
    name="find_cheapest_economics",
    description="T√¨m h·ªçc ph√≠ ng√†nh kinh t·∫ø r·∫ª nh·∫•t t·ª´ c∆° s·ªü d·ªØ li·ªáu"
)

# System prompt ti·∫øng Vi·ªát
SYSTEM_PROMPT = """
üéì XIN CH√ÄO! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n gi√°o d·ª•c c·ªßa b·∫°n!

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
‚ú® T√¨m tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p theo khu v·ª±c v√† ng√¢n s√°ch
üíº T∆∞ v·∫•n tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp c√°c ng√†nh h·ªçc
üìä So s√°nh h·ªçc ph√≠ v√† ch·∫•t l∆∞·ª£ng ƒë√†o t·∫°o

Khi b·∫°n h·ªèi v·ªÅ tr∆∞·ªùng ƒë·∫°i h·ªçc, t√¥i s·∫Ω d√πng find_universities
Khi b·∫°n h·ªèi v·ªÅ tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp, t√¥i s·∫Ω d√πng career_advice

T√¥i s·∫Ω tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† chi ti·∫øt! üåü
"""

# Kh·ªüi t·∫°o LLM v·ªõi fallback
def create_llm():
    """T·∫°o LLM v·ªõi error handling"""
    try:
        # Th·ª≠ Google AI tr∆∞·ªõc
        if os.getenv("GOOGLE_API_KEY"):
            print("üöÄ S·ª≠ d·ª•ng Google AI...")
            return GoogleGenAI(
                model="gemini-2.0-flash",
            )
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi Google AI: {e}")
    
    
    # N·∫øu kh√¥ng c√≥ API key n√†o ho·∫°t ƒë·ªông
    print("‚ùå Kh√¥ng c√≥ API key h·ª£p l·ªá. Vui l√≤ng c·∫•u h√¨nh GOOGLE_API_KEY ho·∫∑c OPENAI_API_KEY")
    return None

# H√†m main ƒë∆°n gi·∫£n
async def main():
    """Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh"""
    print("üéì KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG T∆Ø V·∫§N GI√ÅO D·ª§C")
    print("=" * 50)
    
    # T·∫°o LLM
    llm = create_llm()
    if not llm:
        print("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o LLM. Vui l√≤ng ki·ªÉm tra API keys!")
        return
    
    try:
        # T·∫°o agent
        agent = FunctionAgent(
            tools=[uni_tool, career_tool, cheapest_economics_tool],
            llm=llm,
            system_prompt=SYSTEM_PROMPT,
            verbose=True
        )
        
        # T·∫°o workflow
        workflow = AgentWorkflow(
            agents=[agent],
            root_agent=agent
        )
        
        print("‚úÖ Kh·ªüi t·∫°o th√†nh c√¥ng!")
        
        # Test query
        user_query = (
            "Cho t√¥i h·ªçc ph√≠ ng√†nh Kinh t·∫ø ·ªü khu v·ª±c C·∫ßu Gi·∫•y, "
            "h·ªçc ph√≠ d∆∞·ªõi 2 tri·ªáu/th√°ng, ng√†nh n√†o c√≥ tri·ªÉn v·ªçng khi ra tr∆∞·ªùng"
        )
        
        print(f"\nüí¨ C√¢u h·ªèi: {user_query}")
        print("\nü§ñ ƒêang x·ª≠ l√Ω...")
        
        response = await workflow.run(user_msg=user_query)
        
        print("\nüìã K·∫æT QU·∫¢:")
        print("=" * 50)
        print(response)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        print("\nüîß TEST STRUCTURED DATA:")
        
        # Test structured data function
        cheapest = find_cheapest_economics_program()
        print("\nüí∞ H·ªåC PH√ç KINH T·∫æ R·∫∫ NH·∫§T:")
        print(cheapest)

# C·∫•u h√¨nh API keys (th√™m v√†o file .env ho·∫∑c export)
if __name__ == "__main__":
    print("üí° H∆Ø·ªöNG D·∫™N C·∫§U H√åNH:")
    print("1. T·∫°o file .env v·ªõi:")
    print("   GOOGLE_API_KEY=your_google_api_key")
    print("   # ho·∫∑c")  
    print("   OPENAI_API_KEY=your_openai_api_key")
    print("\n2. Ho·∫∑c export trong terminal:")
    print("   export GOOGLE_API_KEY='your_key'")
    print("\n" + "=" * 50)
    
    asyncio.run(main())