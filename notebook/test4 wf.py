# ‚úÖ C√°ch hi·ªán t·∫°i: AgentWorkflow
# G·ªìm agent linearly: Filter ‚Üí Score ‚Üí RAG ‚Üí Summarizer.

# ƒê∆°n gi·∫£n, d·ªÖ hi·ªÉu, d√πng can_handoff_to ƒë·ªÉ ƒë·ªãnh lu·ªìng.

# Limit: thi·∫øu kh·∫£ nƒÉng loop, parallelism, ho·∫∑c branching conditional ph·ª©c t·∫°p.


# pip install llama-index llama-index-utils-workflow openai python-dotenv
from llama_index.core import VectorStoreIndex, SimpleDirectoryReader, Settings, Document

from llama_index.llms.openai import OpenAI
from llama_index.core.agent.workflow import AgentWorkflow, FunctionAgent
from llama_index.core.tools import FunctionTool, QueryEngineTool
from llama_index.core.workflow import Workflow, step, StartEvent, StopEvent, Event

from typing import List


import os
import asyncio
from dotenv import load_dotenv
load_dotenv()
Settings.llm = OpenAI(model="gpt-4")

UNIVERSITIES_DB = {
    "bach_khoa_hn": {
        "name": "ƒê·∫°i h·ªçc B√°ch Khoa H√† N·ªôi",
        "cutoff_gpa": 8.5,
        "tuition_per_month": 2000000,
        "location": "H√† N·ªôi",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 8.7, "career": "L·∫≠p tr√¨nh vi√™n, Data Scientist"},
            "C∆° kh√≠": {"cutoff": 8.3, "career": "K·ªπ s∆∞ c∆° kh√≠, Thi·∫øt k·∫ø s·∫£n ph·∫©m"},
            "ƒêi·ªán t·ª≠ vi·ªÖn th√¥ng": {"cutoff": 8.5, "career": "K·ªπ s∆∞ ƒëi·ªán t·ª≠, IoT Developer"}
        },
        "facilities": "Lab hi·ªán ƒë·∫°i, th∆∞ vi·ªán l·ªõn",
        "ranking": "Top 1 k·ªπ thu·∫≠t Vi·ªát Nam"
    },
    "kinh_te_qd": {
        "name": "ƒê·∫°i h·ªçc Kinh t·∫ø Qu·ªëc d√¢n", 
        "cutoff_gpa": 7.8,
        "tuition_per_month": 1500000,
        "location": "H√† N·ªôi",
        "programs": {
            "Kinh t·∫ø": {"cutoff": 8.0, "career": "Nh√† kinh t·∫ø, Ph√¢n t√≠ch ch√≠nh s√°ch"},
            "T√†i ch√≠nh Ng√¢n h√†ng": {"cutoff": 8.2, "career": "Banker, Financial Analyst"},
            "Marketing": {"cutoff": 7.5, "career": "Marketing Manager, Digital Marketer"}
        },
        "facilities": "M√¥ ph·ªèng giao d·ªãch ch·ª©ng kho√°n",
        "ranking": "Top 1 kinh t·∫ø Vi·ªát Nam"
    },
    "fpt": {
        "name": "ƒê·∫°i h·ªçc FPT",
        "cutoff_gpa": 6.5,
        "tuition_per_month": 3000000,
        "location": "TP.HCM, H√† N·ªôi, ƒê√† N·∫µng",
        "programs": {
            "C√¥ng ngh·ªá th√¥ng tin": {"cutoff": 6.8, "career": "Software Engineer, DevOps"},
            "Kinh doanh Qu·ªëc t·∫ø": {"cutoff": 6.3, "career": "Business Analyst, Project Manager"},
            "Thi·∫øt k·∫ø ƒê·ªì h·ªça": {"cutoff": 6.0, "career": "UI/UX Designer, Graphic Designer"}
        },
        "facilities": "Campus hi·ªán ƒë·∫°i, lab Apple, th·ª±c t·∫≠p t·∫°i FPT",
        "ranking": "Top CNTT t∆∞ th·ª•c"
    },
    "rmit": {
        "name": "RMIT Vi·ªát Nam",
        "cutoff_gpa": 7.0,
        "tuition_per_month": 8000000,
        "location": "TP.HCM",
        "programs": {
            "Computer Science": {"cutoff": 7.2, "career": "Tech Lead, Research Scientist"},
            "Business Administration": {"cutoff": 6.8, "career": "CEO, Consultant"},
            "Media & Communication": {"cutoff": 6.5, "career": "Content Creator, PR Manager"}
        },
        "facilities": "Chu·∫©n qu·ªëc t·∫ø, b·∫±ng c·∫•p Australia",
        "ranking": "Top 250 th·∫ø gi·ªõi"
    }
}

# T·∫°o documents chi ti·∫øt cho RAG
docs = []
for uni_id, uni_data in UNIVERSITIES_DB.items():
    # Document t·ªïng quan
    overview = f"""
    {uni_data['name']}:
    - ƒêi·ªÉm chu·∫©n chung: {uni_data['cutoff_gpa']}/10
    - H·ªçc ph√≠: {uni_data['tuition_per_month']:,} VNƒê/th√°ng
    - ƒê·ªãa ƒëi·ªÉm: {uni_data['location']}
    - C∆° s·ªü v·∫≠t ch·∫•t: {uni_data['facilities']}
    - X·∫øp h·∫°ng: {uni_data['ranking']}
    """
    
    # Document chi ti·∫øt t·ª´ng ng√†nh
    for program, details in uni_data['programs'].items():
        program_info = f"""
        {uni_data['name']} - Ng√†nh {program}:
        - ƒêi·ªÉm chu·∫©n: {details['cutoff']}/10
        - C∆° h·ªôi ngh·ªÅ nghi·ªáp: {details['career']}
        - Tr∆∞·ªùng: {uni_data['name']}
        - H·ªçc ph√≠: {uni_data['tuition_per_month']:,} VNƒê/th√°ng
        - ƒê·ªãa ƒëi·ªÉm: {uni_data['location']}
        """
        docs.append(Document(text=program_info))
    
    docs.append(Document(text=overview))

# T·∫°o Vector Index
# 1. Load documents (university data)
index = VectorStoreIndex.from_documents(docs)
# 2. Custom Event types
class FilteredEvent(Event):
    filtered: List[dict]  # danh s√°ch {uni, program, cutoff}

class ScoredEvent(Event):
    scored: List[dict]  # th√™m tr∆∞·ªùng score

class DetailedEvent(Event):
    details: List[dict]  # th√™m info t·ª´ retrieved text

# 3. Workflow definition
class UniWorkflow(Workflow):

    @step
    async def step_filter(self, ev: StartEvent) -> FilteredEvent:
        gpa = ev.gpa
        budget = ev.budget
        location = ev.location
        filtered = [
            {"uni": u["name"], "program": p, "cutoff": d["cutoff"]}
            for u in UNIVERSITIES_DB.values()
            for p, d in u["programs"].items()
            if d["cutoff"] <= gpa
            and u["tuition_per_month"] / 1e6 <= budget
            and location in u["location"]
        ]
        return FilteredEvent(filtered=filtered)

    @step
    async def step_score(self, ev: FilteredEvent) -> ScoredEvent:
        scored = sorted(
            [{"uni": f["uni"], "program": f["program"],
              "cutoff": f["cutoff"], 
              "score": (10 - f["cutoff"]) * 10}
             for f in ev.filtered],
            key=lambda x: -x["score"]
        )
        return ScoredEvent(scored=scored)

    @step
    async def step_retrieve(self, ev: ScoredEvent) -> DetailedEvent:
        results = []
        for item in ev.scored[:3]:  # top 3
            query = f"{item['program']} t·∫°i {item['uni']}"
            resp = index.as_query_engine().query(query)
            results.append({
                **item,
                "rag": resp.response
            })
        return DetailedEvent(details=results)

    @step
    async def step_summarize(self, ev: DetailedEvent) -> StopEvent:
        s = ""
        for d in ev.details:
            s += f"üè´ **{d['uni']}** ‚Äì {d['program']} (score: {d['score']:.0f})\n"
            s += f"{d['rag']}\n\n"
        return StopEvent(result=s)

# 4. Ch·∫°y workflow
async def main():
    w = UniWorkflow(timeout=60, verbose=True)
    res = await w.run(gpa=8.2, budget=2.5, location="H√† N·ªôi")
    print(str(res))

if __name__ == "__main__":
    asyncio.run(main())