from llama_index.llms.google_genai import GoogleGenAI
from llama_index.indices.managed.llama_cloud import LlamaCloudIndex
from llama_index.core import Settings
from llama_index.core.tools import QueryEngineTool, ToolMetadata, FunctionTool
from llama_index.core.agent import ReActAgent
from llama_index.core.memory import ChatMemoryBuffer
from llama_index.core.callbacks import CallbackManager, LlamaDebugHandler
from llama_index.core.retrievers import VectorIndexRetriever
from llama_index.core.query_engine import RetrieverQueryEngine
from llama_index.core.postprocessor import SimilarityPostprocessor
from llama_index.core.response_synthesizers import get_response_synthesizer, ResponseMode
from llama_index.core.storage.cache import SimpleCache

import os
import logging
import asyncio
from typing import List, Optional, Dict, Any
from dataclasses import dataclass
from dotenv import load_dotenv

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

@dataclass
class University:
    name: str
    location: str
    fee_per_month: float
    programs: List[str]
    ranking: Optional[int] = None

class OptimizedAgenticRAG:
    def __init__(self):
        self.setup_llm()
        self.setup_debugging()
        self.setup_cache()
        self.setup_index()
        self.setup_tools()
        self.setup_agent()
    
    def setup_llm(self):
        """C·∫•u h√¨nh LLM v·ªõi c√°c tham s·ªë t·ªëi ∆∞u"""
        self.llm = GoogleGenAI(
            model="gemini-2.0-flash",
            temperature=0.1,  # Gi·∫£m randomness cho k·∫øt qu·∫£ ·ªïn ƒë·ªãnh
            max_tokens=4096
        )
        Settings.llm = self.llm
        logger.info("‚úÖ LLM configured successfully")
    
    def setup_debugging(self):
        """Setup debug v√† callback manager"""
        llama_debug = LlamaDebugHandler(print_trace_on_end=True)
        self.callback_manager = CallbackManager([llama_debug])
        Settings.callback_manager = self.callback_manager
        logger.info("‚úÖ Debug handler configured")
    
    def setup_cache(self):
        """Setup caching ƒë·ªÉ t·ªëi ∆∞u performance"""
        cache = SimpleCache()
        Settings.cache = cache
        logger.info("‚úÖ Cache configured")
    
    def setup_index(self):
        """Kh·ªüi t·∫°o LlamaCloud index v·ªõi error handling"""
        try:
            self.index = LlamaCloudIndex(
                name="dsdaihoc",
                project_name="Default", 
                organization_id="1bcf5fb2-bd7d-4c76-b6d5-bb793486e1b3",
                api_key=os.getenv("LLAMA_CLOUD_API_KEY"),
            )
            logger.info("‚úÖ LlamaCloud index initialized")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize index: {e}")
            raise
    
    def create_advanced_query_engine(self):
        """T·∫°o query engine v·ªõi retrieval strategy n√¢ng cao"""
        # Retriever v·ªõi top_k cao h∆°n
        retriever = VectorIndexRetriever(
            index=self.index,
            similarity_top_k=10,
        )
        
        # Postprocessor ƒë·ªÉ l·ªçc k·∫øt qu·∫£ c√≥ ƒë·ªô t∆∞∆°ng ƒë·ªìng th·∫•p
        postprocessor = SimilarityPostprocessor(similarity_cutoff=0.7)
        
        # Response synthesizer t·ªëi ∆∞u
        response_synthesizer = get_response_synthesizer(
            response_mode=ResponseMode.COMPACT,
            use_async=True
        )
        
        return RetrieverQueryEngine(
            retriever=retriever,
            node_postprocessors=[postprocessor],
            response_synthesizer=response_synthesizer
        )
    
    def search_by_criteria(self, location: str = None, max_fee: float = None, 
                          program: str = None) -> str:
        """Tool t√¨m ki·∫øm theo ti√™u ch√≠ c·ª• th·ªÉ"""
        query_parts = []
        if location:
            query_parts.append(f"tr∆∞·ªùng ƒë·∫°i h·ªçc ·ªü {location}")
        if max_fee:
            query_parts.append(f"h·ªçc ph√≠ d∆∞·ªõi {max_fee} tri·ªáu")
        if program:
            query_parts.append(f"ng√†nh {program}")
        
        query = " ".join(query_parts)
        logger.info(f"üîç Searching with criteria: {query}")
        
        try:
            qe = self.create_advanced_query_engine()
            response = qe.query(query)
            return str(response)
        except Exception as e:
            logger.error(f"Search error: {e}")
            return f"Kh√¥ng th·ªÉ t√¨m ki·∫øm v·ªõi ti√™u ch√≠: {query}"
    
    def analyze_career_prospects(self, program: str) -> str:
        """Tool ph√¢n t√≠ch tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp"""
        query = f"tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp ng√†nh {program} t·∫°i Vi·ªát Nam"
        logger.info(f"üìä Analyzing career prospects for: {program}")
        
        try:
            qe = self.create_advanced_query_engine()
            response = qe.query(query)
            return str(response)
        except Exception as e:
            logger.error(f"Career analysis error: {e}")
            return f"Kh√¥ng th·ªÉ ph√¢n t√≠ch tri·ªÉn v·ªçng cho ng√†nh: {program}"
    
    def compare_universities(self, university_names: List[str]) -> str:
        """Tool so s√°nh c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc"""
        query = f"so s√°nh c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc: {', '.join(university_names)}"
        logger.info(f"‚öñÔ∏è Comparing universities: {university_names}")
        
        try:
            qe = self.create_advanced_query_engine()
            response = qe.query(query)
            return str(response)
        except Exception as e:
            logger.error(f"Comparison error: {e}")
            return f"Kh√¥ng th·ªÉ so s√°nh c√°c tr∆∞·ªùng: {', '.join(university_names)}"
    
    def setup_tools(self):
        """Setup c√°c tools chuy√™n bi·ªát cho agent"""
        # Tool ch√≠nh cho query t·ªïng qu√°t
        main_qe = self.create_advanced_query_engine()
        main_tool = QueryEngineTool(
            query_engine=main_qe,
            metadata=ToolMetadata(
                name="university_search",
                description="T√¨m ki·∫øm th√¥ng tin t·ªïng qu√°t v·ªÅ c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc Vi·ªát Nam"
            ),
        )
        
        # Tool t√¨m ki·∫øm theo ti√™u ch√≠
        criteria_tool = FunctionTool.from_defaults(
            fn=self.search_by_criteria,
            name="search_by_criteria",
            description="T√¨m ki·∫øm tr∆∞·ªùng ƒë·∫°i h·ªçc theo ti√™u ch√≠ c·ª• th·ªÉ (ƒë·ªãa ƒëi·ªÉm, h·ªçc ph√≠, ng√†nh h·ªçc)"
        )
        
        # Tool ph√¢n t√≠ch tri·ªÉn v·ªçng
        career_tool = FunctionTool.from_defaults(
            fn=self.analyze_career_prospects,
            name="career_analysis", 
            description="Ph√¢n t√≠ch tri·ªÉn v·ªçng ngh·ªÅ nghi·ªáp c·ªßa m·ªôt ng√†nh h·ªçc"
        )
        
        # Tool so s√°nh tr∆∞·ªùng
        compare_tool = FunctionTool.from_defaults(
            fn=self.compare_universities,
            name="university_comparison",
            description="So s√°nh nhi·ªÅu tr∆∞·ªùng ƒë·∫°i h·ªçc v·ªõi nhau"
        )
        
        self.tools = [main_tool, criteria_tool, career_tool, compare_tool]
        logger.info(f"‚úÖ {len(self.tools)} tools configured")
    
    def setup_agent(self):
        """Setup ReAct agent v·ªõi memory"""
        # Memory ƒë·ªÉ nh·ªõ context cu·ªôc h·ªôi tho·∫°i
        memory = ChatMemoryBuffer.from_defaults(token_limit=3000)
        
        # T·∫°o agent
        self.agent = ReActAgent.from_tools(
            self.tools,
            llm=self.llm,
            memory=memory,
            verbose=True,
            max_iterations=10,
            system_prompt="""
            B·∫°n l√† m·ªôt AI consultant chuy√™n t∆∞ v·∫•n gi√°o d·ª•c ƒë·∫°i h·ªçc t·∫°i Vi·ªát Nam.
            
            Nhi·ªám v·ª• c·ªßa b·∫°n:
            1. Ph√¢n t√≠ch c√¢u h·ªèi c·ªßa user m·ªôt c√°ch chi ti·∫øt
            2. S·ª≠ d·ª•ng c√°c tools ph√π h·ª£p ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin
            3. T·ªïng h·ª£p v√† ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ, th·ª±c t·∫ø
            4. Lu√¥n cung c·∫•p th√¥ng tin ch√≠nh x√°c v√† c·∫≠p nh·∫≠t
            
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch th√¢n thi·ªán, chuy√™n nghi·ªáp v√† h·ªØu √≠ch.
            """
        )
        logger.info("‚úÖ ReAct agent configured with memory")
    
    async def query(self, question: str) -> Optional[str]:
        """Th·ª±c hi·ªán query v·ªõi error handling"""
        try:
            logger.info(f"ü§ñ Processing question: {question}")
            response = await self.agent.achat(question)
            return str(response)
        except Exception as e:
            logger.error(f"‚ùå Query failed: {e}")
            return f"Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"
    
    def chat(self, question: str) -> Optional[str]:
        """Sync version c·ªßa query method"""
        try:
            logger.info(f"ü§ñ Processing question: {question}")
            response = self.agent.chat(question)
            return str(response)
        except Exception as e:
            logger.error(f"‚ùå Query failed: {e}")
            return f"Xin l·ªói, c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}"

# Usage example
async def main():
    """Main function ƒë·ªÉ test agent"""
    try:
        # Kh·ªüi t·∫°o agent
        print("üöÄ Initializing Optimized Agentic RAG...")
        rag_agent = OptimizedAgenticRAG()
        
        # Test query
        question = "H·ªçc tr∆∞·ªùng kinh t·∫ø n√†o ·ªü H√† N·ªôi, h·ªçc ph√≠ d∆∞·ªõi 2 tri·ªáu/th√°ng, ng√†nh t√†i ch√≠nh ng√¢n h√†ng c√≥ tri·ªÉn v·ªçng khi ra tr∆∞·ªùng"
        
        print("\nüîç ƒêang ph√¢n t√≠ch c√¢u h·ªèi v√† t√¨m ki·∫øm th√¥ng tin...")
        print("=" * 70)
        
        # S·ª≠ d·ª•ng async version
        response = await rag_agent.query(question)
        
        print("\nüìã K·∫øt qu·∫£ t·ª´ Agentic RAG:")
        print("=" * 70)
        print(response)
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

# Sync version cho testing
def main_sync():
    """Sync version of main for easier testing"""
    try:
        print("üöÄ Initializing Optimized Agentic RAG...")
        rag_agent = OptimizedAgenticRAG()
        
        question = "H·ªçc tr∆∞·ªùng kinh t·∫ø n√†o ·ªü H√† N·ªôi, h·ªçc ph√≠ d∆∞·ªõi 2 tri·ªáu/th√°ng, ng√†nh t√†i ch√≠nh ng√¢n h√†ng c√≥ tri·ªÉn v·ªçng khi ra tr∆∞·ªùng"
        
        print("\nüîç ƒêang ph√¢n t√≠ch c√¢u h·ªèi v√† t√¨m ki·∫øm th√¥ng tin...")
        print("=" * 70)
        
        response = rag_agent.chat(question)
        
        print("\nüìã K·∫øt qu·∫£ t·ª´ Agentic RAG:")
        print("=" * 70) 
        print(response)
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == "__main__":
    # Ch·∫°y sync version
    main_sync()
    
    # Ho·∫∑c ch·∫°y async version
    # asyncio.run(main())